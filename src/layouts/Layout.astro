---
import CommonHeader from "../components/common/common-header.astro";
import type { SeoPlugin } from "../models/strapi/components/seo.interface";
import { SEOMetadata } from "astro-seo-metadata";

interface Props {
  seo: SeoPlugin;
  lang: string;
}

const { seo, lang } = Astro.props;
---

<!doctype html>
<html lang={lang}>
  <head>
    <CommonHeader />
    <SEOMetadata
      siteName={"CafÃ© Vienne"}
      title={seo.metaTitle}
      description={seo.metaDescription}
      image={seo.metaImage.data.attributes.formats["small"].url}
      favicon={"/favicon.svg"}
      author="Boris MAURENCE - Llanas.dev"
      canonicalUrl="https://cafe-vienne.fr"
      type={"website"}
      astroGenerator={true}
    />
    <meta property="og:url" content="https://cafe-vienne.fr" />
    <meta property="og:description" content={seo.metaDescription} />
  </head>
  <body class="bg-bright text-dark scroll-smooth">
    <slot />
    <script is:inline>
      const mapVisibleParallax = new Map();
      const listParalax = document.querySelectorAll("[data-parallax]");
      var animationFrameInterval = null;
      var hasBeenScrolled = true;

      const onScrollLayout = () => {
        if (hasBeenScrolled) {
          mapVisibleParallax.values().forEach((element) => {
            const { top } = element.getBoundingClientRect();
            const parallaxScale = element.dataset.parallax;
            const middleY = (window.innerHeight - 96) / 2;
            const halfHeight = element.offsetHeight / 2 + top;
            element.style.transform = `translateY(${((middleY - halfHeight) * parallaxScale) / 10}px)`;
          });
        }
        hasBeenScrolled = false;
        animationFrameInterval = window.requestAnimationFrame(onScrollLayout);
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            mapVisibleParallax.set(
              entry.target.dataset.parallaxIndex,
              entry.target
            );
          } else {
            mapVisibleParallax.delete(entry.target.dataset.parallaxIndex);
          }
        });
      });

      listParalax.forEach((element, index) => {
        element.dataset.parallaxIndex = index;
        observer.observe(element);
      });

      var prevScrollpos = window.scrollY;
      window.addEventListener("scroll", () => {
        /* When the user scrolls down, hide the navbar. When the user scrolls up, show the navbar */
        var currentScrollPos = window.scrollY;
        if (prevScrollpos > currentScrollPos) {
          document.getElementById("header").style.top = "0";
        } else {
          document.getElementById("header").style.top = "-112px";
        }
        prevScrollpos = currentScrollPos;
        hasBeenScrolled = true;
      });

      onScrollLayout();
    </script>
  </body>
</html>
